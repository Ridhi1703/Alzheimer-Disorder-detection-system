# -*- coding: utf-8 -*-
"""AdvanceMRIMODEL1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d8xANUNc04I9YNt-59d4rLmXIedjtY-J
"""

from google.colab import files
files.upload()  # Upload the `kaggle.json` file from your local system.



!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json



!kaggle datasets download -d aryansinghal10/alzheimers-multiclass-dataset-equal-and-augmented
!unzip alzheimer-mri-4-classes-dataset.zip -d /content/alzheimers_dataset

!unzip alzheimers-multiclass-dataset-equal-and-augmented.zip -d /content/alzheimers_dataset



import os
base_dir = '/content/alzheimers_dataset/Alzheimer_MRI_4combined_images'
print(os.listdir(base_dir))



!pip install split-folders
import splitfolders

splitfolders.ratio(
    base_dir,
    output="/content/alzheimers_dataset/split_data",
    seed=42,
    ratio=(0.8, 0.2)  # 80% train, 20% test
)



from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir = '/content/alzheimers_dataset/split_data/train'
test_dir = '/content/alzheimers_dataset/split_data/val'

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

test_data = test_datagen.flow_from_directory(
    test_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)



from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(4, activation='softmax')  # 4 classes
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, epochs=10, validation_data=test_data)

model.sumary()

model.summary()

print(train_data.class_indices)

loss, accuracy = model.evaluate(test_data)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

model.save('/content/advanceMRI_AD_model.h5')
